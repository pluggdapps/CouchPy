from   copy               import deepcopy

from   httperror          import *
from   httpc              import HttpSession, ResourceNotFound, OK, CREATED
from   couchpy            import CouchPyError

""" Design document structure,
{
  '_id'      : '_design/<design-docname>',
  '_rev'     : '<rev-md5>',             /* Will be generated by the server */
  'language' : '<viewserver-language>',
  'views'    : {
    '<viewname>' : {
       'map'    : function( doc ) { ... }
       'reduce' : function( keys, values, rereduce ) { ... }
    },
  },
  '_deleted' : true,
  '_conflict' : true,
}
"""

def _readdocsgn( conn, paths=[], hthdrs={}, **query ) :
    """GET /<db>/_design/<doc>
    query,
        rev=<_rev>, revs=<'true'>, revs_info=<'true'>
    """
    hthdrs = deepcopy( hthdrs )
    hthdrs.update( hdr_acceptjs )
    s, h, d = conn.get( paths, hthdrs, None, _query=query.items() )
    if s == OK :
        return s, h, d
    else :
        return (None, None, None)

def _updatedocsgn( conn, doc, paths=[], hthdrs={} ) :
    """PUT /<db>/_design/<doc>"""
    if '_id' not in doc :
        err = '`_id` to be supplied while updating the design doc'
        raise CouchPyError( err )
    if '_rev' not in doc :
        err = '`_rev` to be supplied while updating the design doc' )
        raise CouchPyError( err )
    body = rest.data2json( doc )
    hthdrs = deepcopy( hthdrs )
    hthdrs.update( hdr_acceptjs )
    s, h, d = conn.put( paths, hthdrs, body )
    if s == OK and d['ok'] == True :
        return s, h, d
    else :
        return (None, None, None)


def _deletedocsgn( conn, doc, paths=[], hthdrs={}, **query ) :
    """DELETE /<db>/_design/<doc>
    query,
        rev=<_rev>
    """
    if 'rev' not in query :
        raise CouchPyError( '`rev` to be supplied while deleteing the doc' )
    hthdrs = deepcopy( hthdrs )
    hthdrs.update( hdr_acceptjs )
    s, h, d = conn.delete( paths, hthdrs, None, _query=query.items() )
    if s == OK and d['ok'] == True :
        return s, h, d
    else :
        return (None, None, None)

def _copydocsgn( conn, paths=[], hthdrs={}, **query ) :
    """COPY /<db>/_design/<doc>
    query,
        rev=<_srcrev>
    """
    if 'Destination' not in hthdrs :
        raise CouchPyError( '`Destination` header field not supplied' )
    s, h, d = conn.copy( paths, hthdrs, None, _query=query.items() )
    if s == OK :
        return s, h, d
    else :
        return (None, None, None)

def _infosgn( conn, paths=[], hthdrs={} ) :
    """GET /<db>/_design/<design-doc>/_info"""
    hthdrs = deepcopy( hthdrs )
    hthdrs.update( hdr_acceptjs )
    s, h, d = conn.delete( paths, hthdrs, None )
    if s == OK :
        return s, h, d
    else :
        return (None, None, None)

def _viewsgn( conn, paths=[], hthdrs={}, **query )
    """
    GET  /<db>/_design/<design-doc>/_view/<view-name>,
         if keys is None
    POST /<db>/_design/<design-doc>/_view/<view-name>,
         if keys is a list of document keys to select
    query for GET,
        descending=<bool>   endkey=<key>        endkey_docid=<id>
        group=<bool>        group_level=<num>   include_docs=<bool>
        key=<key>           limit=<num>         inclusive_end=<bool>
        reduce=<bool>       skip=<num>          stale='ok'
        startkey=<key>      startkey_docid=<id> update_seq=<bool>
    """


class DesignDocument( object ) :

    def __init__( self, db, doc, fetch=True, hthdrs={}, **query ) :
        """Read the document specified by `doc` which can be either a dictionary
        containing `_id` key or a string to be interpreted as `_id` from
        database `db`.  If key-word argument `fetch` is passed as False, then
        the document will not be fetched from the database. Optionally accepts
        HTTP headers `hthdrs`.

        query parameters,
        rev,
            Specify the revision to return
        revs,
            Return a list of the revisions for the document
        revs_info,
            Return a list of detailed revision information for the document

        Return,
            Document object
        Admin-prev,
            No
        """
        # TODO : url-encode _id ???
        self.db = db
        self.conn = db.conn

        id_ = doc if isinstance(doc, basestring) else doc['_id']
        self.paths = db.paths + [ '_design', id_ ]
        s, h, d = _readdoc( self.conn, self.paths, hthdrs=hthdrs, **query
                  ) if fetch == True else (None, None, {})
        self.doc = d

        self.revs = None        # Cached object
        self.revs_info = None   # Cached object
        self.client = db.client
        self.debug = db.debug



